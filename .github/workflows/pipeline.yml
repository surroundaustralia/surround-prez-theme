name: Deploy Changes
on:
  push:
    branches:
      - main
  workflow_dispatch:
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Install python dependencies
        run: |
          python -m pip install -U pip
          pip install poetry
          poetry install
      - name: Token replacement
        run: python pipeline_script.py
        env:
          SPARQL_ENDPOINT: ${{ secrets.SPARQL_ENDPOINT }}
          SPARQL_USERNAME: ${{ secrets.SPARQL_USERNAME }}
          SPARQL_PASSWORD: ${{ secrets.SPARQL_PASSWORD }}
      - name: Get app name
        run: "echo ::set-output name=appName::$(sed -n -e 's/^.*appName: \\(.*\\)/\\1/p' config.yaml)"
        id: get_app_name
      - name: Get deploy method
        run: "echo ::set-output name=deployMethod::$(sed -n -e 's/^.*deploymentMethod: \\(.*\\)/\\1/p' config.yaml)"
        id: get_deploy_method
      # === kubernetes ===
      - name: Temporarily remove theme variable
        if: ${{ steps.get_deploy_method.outputs.deployMethod == "kubernetes" }}
        run: sed -e 's/THEME_VOLUME:/# THEME_VOLUME:/g' deploy/new_kube-manifest.yaml > deploy/new_kube-manifest-replace.yaml
      - name: Configure AWS credentials
        if: ${{ steps.get_deploy_method.outputs.deployMethod == "kubernetes" }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2
      - name: Deploy temp manifest
        if: ${{ steps.get_deploy_method.outputs.deployMethod == "kubernetes" }}
        uses: kodermax/kubectl-aws-eks@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG }}
        with:
          args: apply -f deploy/new_kube-manifest-replace.yaml --validate=false
      - name: Restart deployment
        if: ${{ steps.get_deploy_method.outputs.deployMethod == "kubernetes" }}
        uses: kodermax/kubectl-aws-eks@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG }}
        with:
          args: rollout restart deployment ${{ steps.get_app_name.outputs.appName }}-prez-deployment
      - name: Get newest pod name
        if: ${{ steps.get_deploy_method.outputs.deployMethod == "kubernetes" }}
        uses: kodermax/kubectl-aws-eks@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG }}
        with:
          args: get pod --sort-by=.metadata.creationTimestamp -l app=${{ steps.get_app_name.outputs.appName }} -o jsonpath="{.items[-1:].metadata.name}" > podName.txt
      - name: Save pod name to variable
        if: ${{ steps.get_deploy_method.outputs.deployMethod == "kubernetes" }}
        run: echo ::set-output name=podName::$(cat podName.txt)
        id: save_pod_name
      - name: Exec into pod
        if: ${{ steps.get_deploy_method.outputs.deployMethod == "kubernetes" }}
        uses: kodermax/kubectl-aws-eks@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG }}
        with:
          args: exec ${{ steps.save_pod_name.outputs.podName }} -- sh -c 'rm -rf /app/prez/theme/*'
      - name: Copy theme files
        if: ${{ steps.get_deploy_method.outputs.deployMethod == "kubernetes" }}
        uses: kodermax/kubectl-aws-eks@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG }}
        with:
          args: cp theme/ ${{ steps.save_pod_name.outputs.podName }}:/app/prez/
      - name: Deploy real manifest
        if: ${{ steps.get_deploy_method.outputs.deployMethod == "kubernetes" }}
        uses: kodermax/kubectl-aws-eks@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG }}
        with:
          args: apply -f deploy/new_kube-manifest.yaml --validate=false
      - name: Restart deployment
        if: ${{ steps.get_deploy_method.outputs.deployMethod == "kubernetes" }}
        uses: kodermax/kubectl-aws-eks@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG }}
        with:
          args: rollout restart deployment ${{ steps.get_app_name.outputs.appName }}-prez-deployment
      # === docker ===
      - name: Test Docker step
        if: ${{ steps.get_deploy_method.outputs.deployMethod == "docker" }}
        run: echo "docker deploy method"
      # === ecs ===
      - name: Test ECS step
        if: ${{ steps.get_deploy_method.outputs.deployMethod == "ecs" }}
        run: echo "ecs deploy method"
